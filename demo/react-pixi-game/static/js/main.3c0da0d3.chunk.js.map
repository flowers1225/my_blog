{"version":3,"sources":["page/context/context.ts","page/count-text/index.tsx","page/animal/index.tsx","page/animal-container/index.tsx","page/start-btn/index.tsx","page/count-dowm/index.tsx","page/end/index.tsx","page/game/index.tsx","reportWebVitals.ts","index.tsx"],"names":["reducers","store","animalReducers","count","isTouch","startReducers","isStart","isGameOver","isRestart","state","action","type","Object","assign","value","keys","map","k","reduce","prev","cur","myContext","createContext","CountText","props","useMemo","align","fontWeight","dropShadow","dropShadowAlpha","dropShadowAngle","dropShadowBlur","wordWrap","fill","textStyle","useContext","text","style","x","y","Animal","resource","speed","run","size","startPos","useState","frames","setFrames","animalRef","useRef","pos","setPos","offset","isDrag","setIsDrag","isSpring","setIsSpring","animalSize","width","height","startRef","dispatch","isRun","setIsRun","isRunEnd","setIsRunEnd","isStop","setIsStop","interactive","setInteractive","defaultPos","top","left","current","right","bottom","boundPos","useSpring","springPos","setSpringPos","useEffect","onRestartHandler","useCallback","console","log","play","stop","useTick","speeds","Math","max","onDownHandler","e","data","global","downAnimateEnd","onUpHandler","start","from","to","onRest","onStart","onMoveHandler","min","length","ref","alpha","textures","isPlaying","initialFrame","animationSpeed","pointerdown","pointerup","pointerupoutside","pointermove","AnimalContainer","sprite","process","app","useApp","loaderRef","setResource","animalArr","Array","loader","add","load","_","texture","animations","frame","image","push","PIXI","val","index","random","StartBtn","startHandler","configRef","radius","drawBorder","g","clear","lineStyle","beginFill","drawRoundedRect","endFill","buttonMode","position","draw","anchor","CountDown","time","setTime","timeRef","lastTime","endTime","endSeconds","isEndTime","setIsEndTime","isStartTime","setIsStartTime","setTimeHandler","m","floor","s","updateTime","delta","Date","now","End","endHandler","onClickHandler","getSize","window","innerWidth","innerHeight","ContextContainer","children","reducer","useReducer","Provider","Line","drawLine","moveTo","lineTo","Content","setSize","onResize","requestAnimationFrame","addEventListener","removeEventListener","useSize","setIsStart","onStartHandler","onEndHandler","Game","options","backgroundColor","resizeTo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3c0da0d3.chunk.js","sourcesContent":["import {createContext} from 'react'\n\n// export const initState = {\n//   count: 0,\n//   isTouch: false,\n//   isStart: false,\n//   isGameOver: false,\n// }\n\nexport const store = {\n  animalReducers: {count: 0, isTouch: false},\n  startReducers: {isStart: false, isGameOver: false, isRestart: false}\n}\n\n// @https://scarletsky.github.io/2016/08/20/write-your-own-combine-reducers-in-redux/\nconst combineReducers = (reducers: any) => {\n  return function(state: any, action: any) {\n    return Object.keys(reducers)\n                 .map(k => ({[k]: reducers[k](state[k], action)}))\n                 .reduce((prev, cur) =>(Object.assign({}, prev, cur)))\n  }\n}\n\nexport const animalReducers = function (state: any, action: any) {\n  switch (action.type) {\n    case 'UPDATE_COUNT': \n      return  Object.assign({}, state, {count: action.value})\n    case 'UPDATE_TOUCH':  \n      return Object.assign({}, state, {isTouch: action.value})\n    default:\n      return state\n  }\n}\n\nexport const  startReducers = (state: any, action: any) => {\n  switch (action.type) {\n    case 'UPDATE_START': \n      return Object.assign({}, state, {isStart: !state.isStart})\n    case 'UPDATE_GAME_OVER':  \n      return Object.assign({}, state, {isGameOver: !state.isGameOver})  \n    case 'UPDATE_RESTART':  \n      return Object.assign({}, state, {isRestart: !state.isRestart}) \n    default:\n      return state  \n  }\n}\n\nexport const reducers = combineReducers({animalReducers, startReducers})\n\n\nexport const myContext = createContext({})","import { Text } from '@inlet/react-pixi'\n\nimport { useContext, useMemo } from 'react'\n\nimport { myContext } from '../context/context'\n\nconst CountText = function (props: any) {\n  const [textStyle] = useMemo<any>(() => {\n    return [\n      {\n        align: 'center',\n        fontWeight: 900,\n        dropShadow: true,\n        dropShadowAlpha: 0.6,\n        dropShadowAngle: 1,\n        dropShadowBlur: 5,\n        wordWrap: true,\n        fill: ['#ff0000'],\n      },\n    ]\n  }, [])\n\n  const [{ animalReducers }] = useContext<any>(myContext)\n  const { count } = animalReducers\n  return useMemo(() => {\n    // console.log('render count text')\n    return (\n      <Text text={`逃跑了：${count}`} style={textStyle} x={100} y={100}></Text>\n    )\n  }, [count, textStyle])\n  // return (\n  //   <>\n  //     {console.log('render count text')}\n  //     <Text text={`逃跑了：${count}`} style={textStyle} x={100} y={100}></Text>\n  //   </>\n  // )\n}\n\nexport default CountText\n","import {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  useContext,\n} from 'react'\n\nimport { useTick } from '@inlet/react-pixi'\nimport { AnimatedSprite } from '@inlet/react-pixi/animated'\n\nimport { useSpring } from 'react-spring'\n\nimport { myContext } from '../context/context'\n\nconst Animal = function (props: any) {\n  const { resource, speed, run, size, startPos } = props\n\n  const [frames, setFrames] = useState<Array<any>>([])\n  const animalRef = useRef<any>(null)\n  // const animalRefSpeed = useRef<any>(Math.max(Math.min(speed, 0.45), 0.2))\n  // console.log(animalRefSpeed.current)\n  const [pos, setPos] = useState({ x: 0, y: 0 })\n  const offset = useRef({ x: 0, y: 0 })\n  const [isDrag, setIsDrag] = useState(false)\n  const [isSpring, setIsSpring] = useState(false)\n  const animalSize = useRef({ width: 150, height: 150 })\n\n  const startRef = useRef(true)\n\n  const [{ animalReducers, startReducers }, dispatch] = useContext<any>(\n    myContext\n  )\n  const { isTouch, count } = animalReducers\n  const { isGameOver, isRestart } = startReducers\n\n  const [isRun, setIsRun] = useState(false)\n  const [isRunEnd, setIsRunEnd] = useState(false)\n\n  const [isStop, setIsStop] = useState(false)\n\n  const [interactive, setInteractive] = useState(true)\n\n  const [defaultPos] = useMemo<any>(\n    () => [\n      {\n        x: size.width + startPos,\n        y: size.height - 180,\n      },\n    ],\n    [size, startPos]\n  )\n\n  const [boundPos] = useMemo(() => {\n    return [\n      {\n        top: 0,\n        left: -animalSize.current.width / 2,\n        right: size.width - animalSize.current.width / 2,\n        bottom: defaultPos.y,\n      },\n    ]\n  }, [size, defaultPos])\n  // const [springPos, setSpringPos] = useSpring(\n  //   {\n  //     config: {\n  //       duration: 3000,\n  //     },\n  //   },\n  //   []\n  // )\n  const [springPos, setSpringPos] = useSpring({}, [])\n\n  useEffect(() => {\n    setFrames(resource['run'])\n  }, [resource])\n\n  useEffect(() => {\n    setPos({ ...defaultPos })\n  }, [defaultPos])\n\n  useEffect(() => {\n    setIsRun(run)\n    setIsRunEnd(run)\n  }, [run])\n\n  const onRestartHandler = useCallback(() => {\n    setIsDrag(false)\n    setIsSpring(false)\n    dispatch({ type: 'UPDATE_TOUCH', value: false })\n    setPos({ ...defaultPos })\n  }, [dispatch])\n\n  // 游戏重新开始\n  useEffect(() => {\n    if (animalRef.current) {\n      onRestartHandler()\n      console.log('play')\n      // setFrames(resource['run'])\n      animalRef.current.play()\n      // setIsStop(false)\n      // setInteractive(true)\n      startRef.current = true\n    }\n  }, [isRestart, onRestartHandler])\n\n  // 游戏结束\n  useEffect(() => {\n    if (animalRef.current) {\n      if (isGameOver) {\n        console.log('stop')\n        startRef.current = false\n        setFrames(resource['run'])\n        animalRef.current.stop()\n        // setSpringPos.pause()\n        // setIsStop(true)\n        // setInteractive(false)\n      }\n      setIsStop((state) => !state)\n      setInteractive((state) => !state)\n    }\n  }, [isGameOver, resource])\n\n  // useTick(() => {\n  //   animalRef.current.stop()\n  //   setIsStop(!isStop)\n  //   setInteractive(false)\n  // }, !isStop && isGameOver)\n\n  useTick(() => {\n    // if (isDrag) return false\n    if (pos.x <= -animalSize.current.width) {\n      if (isRunEnd) setIsRunEnd(!isRunEnd)\n      return (\n        dispatch({\n          type: 'UPDATE_COUNT',\n          value: count + 1,\n        }),\n        setPos((pos) => {\n          return {\n            x: size.width,\n            y: pos.y,\n          }\n        })\n      )\n    } else {\n      let speeds = Math.max(0.1, speed)\n      if (pos.x < defaultPos.x / 2 && isRunEnd) {\n        speeds = 1\n        setIsRun(false)\n      }\n      return setPos((pos) => {\n        return {\n          x: pos.x - speeds * 10,\n          y: pos.y,\n        }\n      })\n    }\n  }, !isDrag && !isStop)\n\n  const onDownHandler = useCallback(\n    (e: any) => {\n      if (isSpring || isTouch) return false\n      dispatch({ type: 'UPDATE_TOUCH', value: true })\n      // e.stopPropagation()\n      if (!isRun && isRunEnd) setIsRunEnd(false)\n      setIsSpring(false)\n      setIsDrag(true)\n      offset.current = {\n        x: e.data.global.x - pos.x,\n        y: e.data.global.y - pos.y,\n      }\n      setFrames(resource['catch'])\n      animalRef.current.play()\n    },\n    [pos, isSpring, resource, animalRef, dispatch, isTouch, isRun, isRunEnd]\n  )\n\n  // const onUpHandler = useCallback(\n  //   (e: any) => {\n  //     const { y } = defaultPos\n  //     setFrames(resource['run'])\n\n  //     setPos({\n  //       x: pos.x,\n  //       y: y,\n  //     })\n  //     animalRef.current.play()\n  //     setIsDrag(false)\n  //   },\n  //   [resource, pos]\n  // )\n\n  const downAnimateEnd = useCallback(\n    (y) => {\n      if (!startRef.current) return false\n      setPos({\n        x: pos.x,\n        y: y,\n      })\n      setIsSpring(false)\n      // setIsDrag(false)\n      animalRef.current.play()\n    },\n    [pos]\n  )\n\n  const onUpHandler = useCallback(\n    (e?: any) => {\n      if (!isDrag || isSpring) return false\n      // e.stopPropagation()\n      // todo: pos.y & y 距离\n      dispatch({ type: 'UPDATE_TOUCH', value: false })\n      setIsDrag(false)\n      const { y } = defaultPos\n      setFrames(resource['run'])\n      animalRef.current.stop()\n      if (y - pos.y < 100) {\n        return downAnimateEnd(y)\n      }\n      setSpringPos.start({\n        // config: { duration: 3000 },\n        // delay: 0,\n        from: {\n          y: pos.y,\n        },\n        to: {\n          y: y,\n        },\n        onRest: () => {\n          downAnimateEnd(y)\n        },\n        onStart: () => {\n          setIsSpring(true)\n        },\n      })\n    },\n    [\n      isDrag,\n      resource,\n      pos,\n      setSpringPos,\n      defaultPos,\n      isSpring,\n      downAnimateEnd,\n      dispatch,\n    ]\n  )\n\n  const onMoveHandler = useCallback(\n    (e: any) => {\n      if (isDrag && animalRef.current) {\n        let { top, left, right, bottom } = boundPos\n        let x = Math.max(\n          Math.min(right, e.data.global.x - offset.current.x),\n          left\n        )\n        let y = Math.max(\n          Math.min(bottom, e.data.global.y - offset.current.y),\n          top\n        )\n        setPos({ x, y })\n        // setSpringPos({ x, y })\n      }\n    },\n    [isDrag, boundPos]\n  )\n\n  // const onClickHandler = function () {\n  //   console.log(speed)\n  //   // setIsSpring(true)\n  //   const x = Math.random() * (window.innerWidth - 150)\n  //   const y = Math.random() * (window.innerHeight - 150)\n  //   // setSpringPos.start({\n  //   //   x: x,\n  //   //   y: y,\n  //   //   onRest: () => {\n  //   //     setIsSpring(false)\n  //   //     setPos({ x, y })\n  //   //   },\n  //   // })\n  // }\n\n  return useMemo(() => {\n    return (\n      <>\n        {frames.length !== 0 && (\n          <AnimatedSprite\n            ref={animalRef}\n            // width={150}\n            // height={150}\n            {...animalSize.current}\n            alpha={isDrag ? 0.7 : 1}\n            interactive={interactive}\n            // position={pos}\n            // images={images}\n            textures={frames}\n            isPlaying={true}\n            initialFrame={0}\n            animationSpeed={speed}\n            // click={onClickHandler}\n            // anchor={0.5}\n            pointerdown={onDownHandler}\n            pointerup={onUpHandler}\n            pointerupoutside={onUpHandler}\n            pointermove={onMoveHandler}\n            // {...springPos}\n            {...(isSpring ? springPos : pos)}\n            // x={isSpring ? springPos.x : pos.x}\n            // y={isSpring ? springPos.y : pos.y}\n          ></AnimatedSprite>\n        )}\n      </>\n    )\n  }, [\n    isDrag,\n    pos,\n    interactive,\n    frames,\n    isSpring,\n    speed,\n    springPos,\n    onDownHandler,\n    onMoveHandler,\n    onUpHandler,\n  ])\n\n  // return (\n\n  // )\n}\n\nexport default Animal\n","import * as PIXI from 'pixi.js'\nimport { useEffect, useRef, useState } from 'react'\n\nimport { Container, useApp } from '@inlet/react-pixi'\n\nimport Animal from '../animal'\n\n// const RunAnimal = function (props: any) {\n//   const { resource, speed } = props\n//   const [showRunAnima, setShowRunAnima] = useState(false)\n\n//   let count = 0\n//   useTick(() => {\n//     count++\n//     if (count > 200) {\n//       setShowRunAnima(true)\n//     }\n//     // setSpeed((speed) => speed++)\n//   }, !showRunAnima)\n\n//   return (\n//     <>{showRunAnima && <Animal resource={resource} speed={1.2}></Animal>}</>\n//   )\n// }\n\nconst AnimalContainer = function (props: any) {\n  const sprite = `${process.env.PUBLIC_URL}/assets/sprite.json`\n\n  const app = useApp()\n  const loaderRef = useRef(false)\n  // const [frames, setFrames] = useState<Array<any>>([])\n  const [resource, setResource] = useState<any>(null)\n\n  const animalArr = new Array(8).fill({ speed: 0.5 })\n\n  useEffect(() => {\n    if (!loaderRef.current) {\n      loaderRef.current = true\n      app.loader.add(sprite).load((_, resource) => {\n        resource[sprite].data.texture = {}\n        const { animations, texture } = resource[sprite].data\n\n        Object.keys(animations).map((frame) => {\n          texture[frame] = []\n          animations[frame].map((image: string) => {\n            return texture[frame].push(PIXI.Texture.from(image))\n          })\n          return false\n        })\n        console.log(texture)\n        setResource(resource[sprite].data.texture)\n      })\n    }\n  }, [app.loader, sprite])\n\n  return (\n    <>\n      {resource && (\n        <Container>\n          {console.log('render animal container')}\n          {animalArr.map((val, index) => {\n            // console.log('render')\n            const { speed } = val\n\n            return (\n              <Animal\n                resource={resource}\n                // speed={Math.random() * speed}\n                speed={Math.max(Math.min(Math.random() * speed, 0.45), 0.2)}\n                startPos={index * 40}\n                run={index === 2 ? true : false}\n                key={index}\n                {...props}\n              ></Animal>\n            )\n          })}\n          {/* <RunAnimal resource={resource}></RunAnimal> */}\n        </Container>\n      )}\n    </>\n  )\n}\n\nexport default AnimalContainer\n","import * as PIXI from 'pixi.js'\n\nimport { useCallback, useRef, useContext } from 'react'\n\nimport { Container, Graphics, Text } from '@inlet/react-pixi'\nimport { myContext } from '../context/context'\n\nconst StartBtn = function (props: any) {\n  const { size, startHandler } = props\n\n  // const [isStart, setIsStart] = useState(false)\n\n  const configRef = useRef({ width: 200, height: 80, radius: 10 })\n  const [, dispatch] = useContext<any>(myContext)\n\n  // const onStartHandler = useCallback(\n  //   (e: any) => {\n  //     // setIsStart(true)\n  //     startHandler && startHandler()\n  //   },\n  //   [startHandler]\n  // )\n\n  const onStartHandler = (e: any) => {\n    // setIsStart(true)\n    startHandler && startHandler()\n    dispatch({ type: 'UPDATE_START' })\n  }\n\n  const drawBorder = useCallback(\n    (g: PIXI.Graphics) => {\n      const { width, height, radius } = configRef.current\n\n      g.clear()\n      g.lineStyle(2, 0x000000, 1)\n      g.beginFill(0xff00bb, 0.25)\n      g.drawRoundedRect(0, 0, width, height, radius)\n      g.endFill()\n    },\n    [configRef]\n  )\n\n  return (\n    <Container\n      interactive\n      buttonMode\n      position={[\n        (size.width - configRef.current.width) / 2,\n        (size.height - configRef.current.height) / 2,\n      ]}\n      pointerdown={onStartHandler}\n    >\n      <Graphics draw={drawBorder}></Graphics>\n      <Text\n        anchor={{ x: 0.5, y: 0.5 }}\n        text={`Start`}\n        x={configRef.current.width / 2}\n        y={configRef.current.height / 2}\n        style={{ align: 'center' }}\n      ></Text>\n    </Container>\n  )\n}\n\nexport default StartBtn\n","import {\n  useState,\n  useRef,\n  useCallback,\n  useEffect,\n  useContext,\n  useMemo,\n} from 'react'\nimport { Text, useTick } from '@inlet/react-pixi'\n\nimport { myContext } from '../context/context'\n\nconst CountDown = function () {\n  const [textStyle] = useMemo<any>(() => {\n    return [\n      {\n        align: 'center',\n        fontWeight: 900,\n        dropShadow: true,\n        dropShadowAlpha: 0.6,\n        dropShadowAngle: 1,\n        dropShadowBlur: 5,\n        wordWrap: true,\n        fill: ['#ff0000'],\n      },\n    ]\n  }, [])\n  // const textStyle = {\n  //   align: 'center',\n  //   fontWeight: 900,\n  //   dropShadow: true,\n  //   dropShadowAlpha: 0.6,\n  //   dropShadowAngle: 1,\n  //   dropShadowBlur: 5,\n  //   wordWrap: true,\n  //   fill: ['#ff0000'],\n  // } as any\n\n  const [{ startReducers }, dispatch] = useContext<any>(myContext)\n  const { isStart, isRestart } = startReducers\n\n  const [time, setTime] = useState<any>('0')\n\n  const defuteTime = 600\n\n  const timeRef = useRef<any>({\n    lastTime: 0,\n    endTime: 0,\n    time: defuteTime,\n    endSeconds: 0,\n  })\n  const [isEndTime, setIsEndTime] = useState(false)\n  const [isStartTime, setIsStartTime] = useState(false)\n\n  const setTimeHandler = useCallback((time) => {\n    let m = Math.floor((time / 60) % 60)\n    let s = Math.floor(time % 60)\n    setTime(`${m < 10 ? '0' + m : m} : ${s < 10 ? '0' + s : s}`)\n  }, [])\n\n  useEffect(() => {\n    if (isEndTime) {\n      console.log('restart')\n      setIsStartTime(true)\n      setIsEndTime(false)\n      timeRef.current.time = defuteTime\n      setTimeHandler(timeRef.current.time)\n    }\n  }, [isRestart, setTimeHandler])\n\n  useEffect(() => {\n    if (isStart) {\n      console.log('start')\n      setIsStartTime((state) => !state)\n    }\n  }, [isStart])\n\n  useEffect(() => {\n    console.log('set time')\n    setTimeHandler(timeRef.current.time)\n  }, [setTimeHandler])\n\n  const updateTime = useCallback(() => {\n    timeRef.current.endSeconds = timeRef.current.time--\n    if (timeRef.current.endSeconds <= 0) {\n      setIsEndTime(true)\n      // setIsStartTime(!isStartTime)\n      setTime(`00 : 00`)\n      dispatch({ type: 'UPDATE_GAME_OVER' })\n    } else {\n      timeRef.current.endTime = timeRef.current.endSeconds\n      setTimeHandler(timeRef.current.endTime)\n      // let m = Math.floor((timeRef.current.endTime / 60) % 60)\n      // let s = Math.floor(timeRef.current.endTime % 60)\n      // let millisecond = Math.floor(timeRef.current.endTime % 1000)\n    }\n  }, [timeRef, dispatch, setTimeHandler])\n\n  useTick((delta) => {\n    if (Date.now() - timeRef.current.lastTime >= 1000) {\n      updateTime()\n      timeRef.current.lastTime = Date.now()\n    }\n  }, !isEndTime && isStartTime)\n\n  // return (\n  //   <>\n  //     {console.log('render count dwon')}\n  //     <Text text={time} x={100} y={150} style={textStyle}></Text>\n  //   </>\n  // )\n  return useMemo(() => {\n    return (\n      <>\n        {/* {console.log('render count dwon')} */}\n        <Text text={time} x={100} y={150} style={textStyle}></Text>\n      </>\n    )\n  }, [time, textStyle])\n}\n\nexport default CountDown\n","import * as PIXI from 'pixi.js'\n\nimport { useCallback, useRef, useContext, useMemo } from 'react'\n\nimport { Container, Graphics, Text } from '@inlet/react-pixi'\nimport { myContext } from '../context/context'\n\nconst End = function (props: any) {\n  const { size, endHandler } = props\n\n  // const [isStart, setIsStart] = useState(false)\n\n  const configRef = useRef({ width: 200, height: 80, radius: 10 })\n  const [{ startReducers }, dispatch] = useContext<any>(myContext)\n  const { isGameOver } = startReducers\n\n  // const onStartHandler = useCallback(\n  //   (e: any) => {\n  //     // setIsStart(true)\n  //     startHandler && startHandler()\n  //   },\n  //   [startHandler]\n  // )\n\n  const onClickHandler = useCallback(\n    (e: any) => {\n      endHandler && endHandler()\n      // setIsStart(true)\n      dispatch({ type: 'UPDATE_GAME_OVER' })\n      dispatch({ type: 'UPDATE_RESTART' })\n      dispatch({ type: 'UPDATE_COUNT', value: 0 })\n    },\n    [dispatch, endHandler]\n  )\n\n  const drawBorder = useCallback(\n    (g: PIXI.Graphics) => {\n      const { width, height, radius } = configRef.current\n\n      g.clear()\n      g.lineStyle(2, 0x000000, 1)\n      g.beginFill(0xff00bb, 0.25)\n      g.drawRoundedRect(0, 0, width, height, radius)\n      g.endFill()\n    },\n    [configRef]\n  )\n\n  return useMemo(() => {\n    return (\n      <>\n        {isGameOver && (\n          <Container\n            interactive\n            buttonMode\n            position={[\n              (size.width - configRef.current.width) / 2,\n              (size.height - configRef.current.height) / 2,\n            ]}\n            pointerdown={onClickHandler}\n          >\n            <Graphics draw={drawBorder}></Graphics>\n            <Text\n              anchor={{ x: 0.5, y: 0.5 }}\n              text={`End`}\n              x={configRef.current.width / 2}\n              y={configRef.current.height / 2}\n              style={{ align: 'center' }}\n            ></Text>\n          </Container>\n        )}\n      </>\n    )\n  }, [size, isGameOver, onClickHandler, drawBorder])\n}\n\nexport default End\n","import * as PIXI from 'pixi.js'\nimport { useCallback, useEffect, useState, useReducer } from 'react'\n\nimport { Stage, Graphics, Text } from '@inlet/react-pixi'\n\nimport './index.scss'\n\nimport { store, myContext, reducers } from '../context/context'\n\nimport CountText from '../count-text'\nimport AnimalContainer from '../animal-container'\nimport StartBtn from '../start-btn'\nimport CountDown from '../count-dowm'\nimport End from '../end'\n\nconst getSize = () => {\n  return {\n    width: window.innerWidth,\n    height: window.innerHeight,\n  }\n}\n\nconst useSize = function () {\n  const [size, setSize] = useState(getSize)\n\n  useEffect(() => {\n    const onResize = () => {\n      requestAnimationFrame(() => {\n        setSize(getSize())\n      })\n    }\n\n    window.addEventListener('resize', onResize)\n\n    return () => {\n      window.removeEventListener('resize', onResize)\n    }\n  }, [])\n  return size\n}\n\nconst ContextContainer = function ({ children }: any) {\n  // const reducer1 = combineReducers({ animalReducers, startReducers })\n  const reducer = useReducer(reducers, store)\n  return <myContext.Provider value={reducer}>{children}</myContext.Provider>\n}\n\nconst Line = function (props: any) {\n  const { size } = props\n\n  const drawLine = useCallback(\n    (g: PIXI.Graphics) => {\n      const height = size.height - 50\n\n      g.clear()\n      g.lineStyle(2, 0x000000, 1)\n      g.moveTo(0, height)\n      g.lineTo(size.width, height)\n    },\n    [size]\n  )\n\n  console.log('render line')\n  return <Graphics draw={drawLine}></Graphics>\n}\n\nconst Content = function () {\n  const size = useSize()\n  const [isStart, setIsStart] = useState(false)\n\n  const onStartHandler = useCallback(() => {\n    setIsStart(true)\n  }, [])\n\n  const onEndHandler = useCallback(() => {\n    console.log('end -> restart game')\n  }, [])\n\n  return (\n    <>\n      {isStart ? (\n        <>\n          <AnimalContainer size={size}></AnimalContainer>\n          <Line size={size}></Line>\n        </>\n      ) : (\n        <StartBtn size={size} startHandler={onStartHandler}></StartBtn>\n      )}\n\n      <End size={size} endHandler={onEndHandler}></End>\n    </>\n  )\n}\n\nconst Game = function () {\n  return (\n    <>\n      <Stage\n        {...getSize()}\n        options={{ backgroundColor: 0xffffff, resizeTo: window }}\n      >\n        <ContextContainer>\n          <Content></Content>\n          <CountText></CountText>\n          <CountDown></CountDown>\n        </ContextContainer>\n      </Stage>\n    </>\n  )\n}\n\nexport default Game\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport Game from './page/game'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}