{"version":3,"sources":["page/context/context.ts","page/count-text/index.tsx","page/animal/index.tsx","page/animal-container/index.tsx","page/game/index.tsx","reportWebVitals.ts","index.tsx"],"names":["initState","count","isTouch","reducers","state","action","type","Object","assign","myContext","createContext","CountText","props","useContext","text","style","align","fontWeight","dropShadow","dropShadowAlpha","dropShadowAngle","dropShadowBlur","wordWrap","fill","x","y","Animal","resource","speed","run","size","useState","frames","setFrames","animalRef","useRef","pos","setPos","offset","isDrag","setIsDrag","isSpring","setIsSpring","animalSize","width","height","dispatch","isRun","setIsRun","isRunEnd","setIsRunEnd","useMemo","defaultPos","top","left","current","right","bottom","boundPos","useSpring","springPos","setSpringPos","useEffect","useTick","speeds","Math","max","onDownHandler","useCallback","e","data","global","play","downAnimateEnd","onUpHandler","stop","start","from","to","onRest","onStart","onMoveHandler","min","length","ref","alpha","interactive","textures","isPlaying","initialFrame","animationSpeed","pointerdown","pointerup","pointerupoutside","pointermove","AnimalContainer","sprite","process","app","useApp","loaderRef","setResource","animalArr","Array","loader","add","load","_","texture","animations","keys","map","frame","image","push","PIXI","console","log","val","index","random","getSize","window","innerWidth","innerHeight","ContextContainer","children","reducer","useReducer","Provider","value","Game","setSize","onResize","requestAnimationFrame","addEventListener","removeEventListener","useSize","drawLine","g","clear","lineStyle","moveTo","lineTo","options","backgroundColor","resizeTo","draw","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7f8ee1f4.chunk.js","sourcesContent":["import {createContext} from 'react'\n\nexport const initState = {\n  count: 0,\n  isTouch: false\n}\n\nexport const reducers = function (state: any, action: any) {\n  switch (action.type) {\n    case 'UPDATE_COUNT': \n      return  Object.assign({}, state, {count: state.count+1})\n    case 'UPDATE_TOUCH':  \n      return Object.assign({}, state, {isTouch: !state.isTouch})\n    default: \n      return state\n  }\n}\n\nexport const myContext = createContext({})","import { Text } from '@inlet/react-pixi'\n\nimport { useContext } from 'react'\n\nimport { myContext } from '../context/context'\n\nconst CountText = function (props: any) {\n  const textStyle = {\n    align: 'center',\n    fontWeight: 900,\n    dropShadow: true,\n    dropShadowAlpha: 0.6,\n    dropShadowAngle: 1,\n    dropShadowBlur: 5,\n    wordWrap: true,\n    fill: ['#ff0000'],\n  } as any\n\n  const [state] = useContext<any>(myContext)\n  const { count } = state\n\n  return (\n    <Text text={`逃跑了：${count}`} style={textStyle} x={100} y={100}></Text>\n  )\n}\n\nexport default CountText\n","import {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  useContext,\n} from 'react'\n\nimport { useTick } from '@inlet/react-pixi'\nimport { AnimatedSprite } from '@inlet/react-pixi/animated'\n\nimport { useSpring } from 'react-spring'\n\nimport { myContext } from '../context/context'\n\nconst Animal = function (props: any) {\n  const { resource, speed, run, size } = props\n\n  const [frames, setFrames] = useState<Array<any>>([])\n  const animalRef = useRef<any>(null)\n\n  const [pos, setPos] = useState({ x: 0, y: 0 })\n  const offset = useRef({ x: 0, y: 0 })\n  const [isDrag, setIsDrag] = useState(false)\n  const [isSpring, setIsSpring] = useState(false)\n  const animalSize = useRef({ width: 150, height: 150 })\n\n  const [state, dispatch] = useContext<any>(myContext)\n  const { isTouch } = state\n\n  const [isRun, setIsRun] = useState(false)\n  const [isRunEnd, setIsRunEnd] = useState(false)\n\n  const [defaultPos] = useMemo<any>(\n    () => [\n      {\n        x: size.width,\n        y: size.height - 180,\n      },\n    ],\n    [size]\n  )\n\n  const [boundPos] = useMemo(() => {\n    return [\n      {\n        top: 0,\n        left: -animalSize.current.width / 2,\n        right: size.width - animalSize.current.width / 2,\n        bottom: defaultPos.y,\n      },\n    ]\n  }, [size, defaultPos])\n  // const [springPos, setSpringPos] = useSpring(\n  //   {\n  //     config: {\n  //       duration: 3000,\n  //     },\n  //   },\n  //   []\n  // )\n  const [springPos, setSpringPos] = useSpring({}, [])\n\n  useEffect(() => {\n    setFrames(resource['run'])\n  }, [resource])\n\n  useEffect(() => {\n    setPos({ ...defaultPos })\n  }, [defaultPos])\n\n  useEffect(() => {\n    setIsRun(run)\n    setIsRunEnd(run)\n  }, [run])\n\n  useTick(() => {\n    // if (isDrag) return false\n    if (pos.x <= -animalSize.current.width) {\n      if (isRunEnd) setIsRunEnd(!isRunEnd)\n      return (\n        dispatch({\n          type: 'UPDATE_COUNT',\n        }),\n        setPos((pos) => {\n          return {\n            x: size.width,\n            y: pos.y,\n          }\n        })\n      )\n    } else {\n      let speeds = Math.max(0.1, speed)\n      if (pos.x < defaultPos.x / 2 && isRunEnd) {\n        speeds = 1\n        setIsRun(false)\n      }\n      return setPos((pos) => {\n        return {\n          x: pos.x - speeds * 10,\n          y: pos.y,\n        }\n      })\n    }\n  }, !isDrag)\n\n  const onDownHandler = useCallback(\n    (e: any) => {\n      if (isSpring || isTouch) return false\n      dispatch({ type: 'UPDATE_TOUCH' })\n      // e.stopPropagation()\n      if (!isRun && isRunEnd) setIsRunEnd(false)\n      setIsSpring(false)\n      setIsDrag(true)\n      offset.current = {\n        x: e.data.global.x - pos.x,\n        y: e.data.global.y - pos.y,\n      }\n      setFrames(resource['catch'])\n      animalRef.current.play()\n    },\n    [pos, isSpring, resource, animalRef, dispatch, isTouch, isRun, isRunEnd]\n  )\n\n  // const onUpHandler = useCallback(\n  //   (e: any) => {\n  //     const { y } = defaultPos\n  //     setFrames(resource['run'])\n\n  //     setPos({\n  //       x: pos.x,\n  //       y: y,\n  //     })\n  //     animalRef.current.play()\n  //     setIsDrag(false)\n  //   },\n  //   [resource, pos]\n  // )\n\n  const downAnimateEnd = useCallback(\n    (y) => {\n      setPos({\n        x: pos.x,\n        y: y,\n      })\n      setIsSpring(false)\n      // setIsDrag(false)\n      animalRef.current.play()\n    },\n    [pos]\n  )\n\n  const onUpHandler = useCallback(\n    (e: any) => {\n      if (!isDrag || isSpring) return false\n      // e.stopPropagation()\n      // todo: pos.y & y 距离\n      dispatch({ type: 'UPDATE_TOUCH' })\n      setIsDrag(false)\n      const { y } = defaultPos\n      setFrames(resource['run'])\n      animalRef.current.stop()\n      if (y - pos.y < 100) {\n        return downAnimateEnd(y)\n      }\n      setSpringPos.start({\n        // config: { duration: 3000 },\n        // delay: 0,\n        from: {\n          y: pos.y,\n        },\n        to: {\n          y: y,\n        },\n        onRest: () => {\n          downAnimateEnd(y)\n        },\n        onStart: () => {\n          setIsSpring(true)\n        },\n      })\n    },\n    [\n      isDrag,\n      resource,\n      pos,\n      setSpringPos,\n      defaultPos,\n      isSpring,\n      downAnimateEnd,\n      dispatch,\n    ]\n  )\n\n  const onMoveHandler = useCallback(\n    (e: any) => {\n      if (isDrag && animalRef.current) {\n        let { top, left, right, bottom } = boundPos\n        let x = Math.max(\n          Math.min(right, e.data.global.x - offset.current.x),\n          left\n        )\n        let y = Math.max(\n          Math.min(bottom, e.data.global.y - offset.current.y),\n          top\n        )\n        setPos({ x, y })\n        // setSpringPos({ x, y })\n      }\n    },\n    [isDrag, boundPos]\n  )\n\n  // const onClickHandler = function () {\n  //   console.log(speed)\n  //   // setIsSpring(true)\n  //   const x = Math.random() * (window.innerWidth - 150)\n  //   const y = Math.random() * (window.innerHeight - 150)\n  //   // setSpringPos.start({\n  //   //   x: x,\n  //   //   y: y,\n  //   //   onRest: () => {\n  //   //     setIsSpring(false)\n  //   //     setPos({ x, y })\n  //   //   },\n  //   // })\n  // }\n\n  return (\n    <>\n      {frames.length !== 0 && (\n        <AnimatedSprite\n          ref={animalRef}\n          // width={150}\n          // height={150}\n          {...animalSize.current}\n          alpha={isDrag ? 0.7 : 1}\n          interactive={true}\n          // position={pos}\n          // images={images}\n          textures={frames}\n          isPlaying={true}\n          initialFrame={0}\n          animationSpeed={Math.max(Math.min(speed, 0.45), 0.2)}\n          // click={onClickHandler}\n          // anchor={0.5}\n          pointerdown={onDownHandler}\n          pointerup={onUpHandler}\n          pointerupoutside={onUpHandler}\n          pointermove={onMoveHandler}\n          // {...springPos}\n          {...(isSpring ? springPos : pos)}\n          // x={isSpring ? springPos.x : pos.x}\n          // y={isSpring ? springPos.y : pos.y}\n        ></AnimatedSprite>\n      )}\n    </>\n  )\n}\n\nexport default Animal\n","import * as PIXI from 'pixi.js'\nimport { useEffect, useRef, useState } from 'react'\n\nimport { Container, useApp } from '@inlet/react-pixi'\n\nimport Animal from '../animal'\n\n// const RunAnimal = function (props: any) {\n//   const { resource, speed } = props\n//   const [showRunAnima, setShowRunAnima] = useState(false)\n\n//   let count = 0\n//   useTick(() => {\n//     count++\n//     if (count > 200) {\n//       setShowRunAnima(true)\n//     }\n//     // setSpeed((speed) => speed++)\n//   }, !showRunAnima)\n\n//   return (\n//     <>{showRunAnima && <Animal resource={resource} speed={1.2}></Animal>}</>\n//   )\n// }\n\nconst AnimalContainer = function (props: any) {\n  const sprite = `${process.env.PUBLIC_URL}/assets/sprite.json`\n\n  const app = useApp()\n  const loaderRef = useRef(false)\n  // const [frames, setFrames] = useState<Array<any>>([])\n  const [resource, setResource] = useState<any>(null)\n\n  const animalArr = new Array(8).fill({ speed: 0.5 })\n\n  useEffect(() => {\n    if (!loaderRef.current) {\n      loaderRef.current = true\n\n      app.loader.add(sprite).load((_, resource) => {\n        resource[sprite].data.texture = {}\n        const { animations, texture } = resource[sprite].data\n\n        Object.keys(animations).map((frame) => {\n          texture[frame] = []\n          animations[frame].map((image: string) => {\n            return texture[frame].push(PIXI.Texture.from(image))\n          })\n          return false\n        })\n        console.log(texture)\n        setResource(resource[sprite].data.texture)\n      })\n    }\n  }, [app.loader, sprite])\n\n  return (\n    <>\n      {resource && (\n        <Container>\n          {animalArr.map((val, index) => {\n            // console.log('render')\n            const { speed } = val\n            return (\n              <Animal\n                resource={resource}\n                speed={Math.random() * speed}\n                run={index === 2 ? true : false}\n                key={index}\n                {...props}\n              ></Animal>\n            )\n          })}\n          {/* <RunAnimal resource={resource}></RunAnimal> */}\n        </Container>\n      )}\n    </>\n  )\n}\n\nexport default AnimalContainer\n","import * as PIXI from 'pixi.js'\nimport { useCallback, useEffect, useState, useReducer } from 'react'\n\nimport { Stage, Graphics } from '@inlet/react-pixi'\n\nimport './index.scss'\n\nimport { initState, myContext, reducers } from '../context/context'\n\nimport CountText from '../count-text'\nimport AnimalContainer from '../animal-container'\n\nconst getSize = () => {\n  return {\n    width: window.innerWidth,\n    height: window.innerHeight,\n  }\n}\n\nconst useSize = function () {\n  const [size, setSize] = useState(getSize)\n\n  useEffect(() => {\n    const onResize = () => {\n      requestAnimationFrame(() => {\n        setSize(getSize())\n      })\n    }\n\n    window.addEventListener('resize', onResize)\n\n    return () => {\n      window.removeEventListener('resize', onResize)\n    }\n  }, [])\n  return size\n}\n\nconst ContextContainer = function ({ children }: any) {\n  const reducer = useReducer(reducers, initState)\n\n  return <myContext.Provider value={reducer}>{children}</myContext.Provider>\n}\n\nconst Game = function () {\n  const size = useSize()\n\n  const drawLine = useCallback(\n    (g: PIXI.Graphics) => {\n      const height = size.height - 50\n\n      g.clear()\n      g.lineStyle(2, 0x000000, 1)\n      g.moveTo(0, height)\n      g.lineTo(size.width, height)\n    },\n    [size]\n  )\n\n  return (\n    <>\n      <Stage\n        {...getSize()}\n        options={{ backgroundColor: 0xffffff, resizeTo: window }}\n      >\n        <ContextContainer>\n          <AnimalContainer size={size}></AnimalContainer>\n          <Graphics draw={drawLine}></Graphics>\n          <CountText></CountText>\n        </ContextContainer>\n      </Stage>\n    </>\n  )\n}\n\nexport default Game\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport Game from './page/game'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}